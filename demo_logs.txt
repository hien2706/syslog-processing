2025-03-19T10:18:19+00:00 tranhien-Virtual-Machine "{""EventTime"":""2024-12-24 15:53:49"",""Hostname"":""fileserver"",""Keywords"":-9214364837600034816,""EventType"":""AUDIT_SUCCESS"",""SeverityValue"":2,""Severity"":""INFO"",""EventID"":4624,""SourceName"":""Microsoft-Windows-Security-Auditing"",""ProviderGuid"":""{54849625-5478-4994-A5BA-3E3B0328C30D}"",""Version"":2,""Task"":12544,""OpcodeValue"":0,""RecordNumber"":673152806,""ActivityID"":""{28C2C9D2-381B-0003-D5C9-C2281B38DB01}"",""ProcessID"":840,""ThreadID"":4528,""Channel"":""Security"",""Message"":""An account was successfully logged on.\r\n\r\nSubject:\r\n\tSecurity ID:\t\tS-1-0-0\r\n\tAccount Name:\t\t-\r\n\tAccount Domain:\t\t-\r\n\tLogon ID:\t\t0x0\r\n\r\nLogon Information:\r\n\tLogon Type:\t\t3\r\n\tRestricted Admin Mode:\t-\r\n\tVirtual Account:\t\tNo\r\n\tElevated Token:\t\tNo\r\n\r\nImpersonation Level:\t\tImpersonation\r\n\r\nNew Logon:\r\n\tSecurity ID:\t\tS-1-5-21-3197815917-3488775918-2768529465-46035\r\n\tAccount Name:\t\tCQTHANH-5$\r\n\tAccount Domain:\t\tTMA\r\n\tLogon ID:\t\t0x5A9B9B2E\r\n\tLinked Logon ID:\t\t0x0\r\n\tNetwork Account Name:\t-\r\n\tNetwork Account Domain:\t-\r\n\tLogon GUID:\t\t{00000000-0000-0000-0000-000000000000}\r\n\r\nProcess Information:\r\n\tProcess ID:\t\t0x0\r\n\tProcess Name:\t\t-\r\n\r\nNetwork Information:\r\n\tWorkstation Name:\tCQTHANH-5\r\n\tSource Network Address:\t192.168.11.54\r\n\tSource Port:\t\t54210\r\n\r\nDetailed Authentication Information:\r\n\tLogon Process:\t\tNtLmSsp \r\n\tAuthentication Package:\tNTLM\r\n\tTransited Services:\t-\r\n\tPackage Name (NTLM only):\tNTLM V2\r\n\tKey Length:\t\t128\r\n\r\nThis event is generated when a logon session is created. It is generated on the computer that was accessed.\r\n\r\nThe subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.\r\n\r\nThe logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).\r\n\r\nThe New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.\r\n\r\nThe network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.\r\n\r\nThe impersonation level field indicates the extent to which a process in the logon session can impersonate.\r\n\r\nThe authentication information fields provide detailed information about this specific logon request.\r\n\t- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.\r\n\t- Transited services indicate which intermediate services have participated in this logon request.\r\n\t- Package name indicates which sub-protocol was used among the NTLM protocols.\r\n\t- Key length indicates the length of the generated session key. This will be 0 if no session key was requested."",""Category"":""Logon"",""Opcode"":""Info"",""SubjectUserSid"":""S-1-0-0"",""SubjectUserName"":""-"",""SubjectDomainName"":""-"",""SubjectLogonId"":""0x0"",""TargetUserSid"":""S-1-5-21-3197815917-3488775918-2768529465-46035"",""TargetUserName"":""CQTHANH-5$"",""TargetDomainName"":""TMA"",""TargetLogonId"":""0x5a9b9b2e"",""LogonType"":""3"",""LogonProcessName"":""NtLmSsp "",""AuthenticationPackageName"":""NTLM"",""WorkstationName"":""CQTHANH-5"",""LogonGuid"":""{00000000-0000-0000-0000-000000000000}"",""TransmittedServices"":""-"",""LmPackageName"":""NTLM V2"",""KeyLength"":""128"",""ProcessName"":""-"",""IpAddress"":""192.168.11.54"",""IpPort"":""54210"",""ImpersonationLevel"":""%%1833"",""RestrictedAdminMode"":""-"",""TargetOutboundUserName"":""-"",""TargetOutboundDomainName"":""-"",""VirtualAccount"":""%%1843"",""TargetLinkedLogonId"":""0x0"",""ElevatedToken"":""%%1843"",""EventReceivedTime"":""2024-12-24 15:53:50"",""SourceModuleName"":""eventLog"",""SourceModuleType"":""im_msvistalog""}"
2025-03-19T10:27:06+00:00 48806fc03cfc "Dec 24 15:53:49 2024	4104	Microsoft-Windows-PowerShell	SYSTEM	User	Warning	lctuan-menlo.tma.com.vn	Execute a Remote Command		Creating Scriptblock text (1 of 4):    #requires -version 3.0    try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }    $script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module    $script:ClassName = 'ROOT/StandardCimv2/MSFT_NetNeighbor'  $script:ClassVersion = '1.0.0'  $script:ModuleVersion = '1.0.0'  $script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]    $script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()    Microsoft.PowerShell.Core\Export-ModuleMember -Function @()              function __cmdletization_BindCommonParameters  {      param(          $__cmdletization_objectModelWrapper,          $myPSBoundParameters      )                                     if ($myPSBoundParameters.ContainsKey('CimSession')) {               $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession']           }                                  if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) {               $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit']           }                                  if ($myPSBoundParameters.ContainsKey('AsJob')) {               $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob']           }                          }                      function New-NetNeighbor  {      [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]            [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]      param(            [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]      [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]      [string]      ${IPAddress},        [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]      [Alias('ifAlias')]      [string]      ${InterfaceAlias},        [Parameter(ParameterSetName='ByInterfaceAlias')]      [Parameter(ParameterSetName='ByInterfaceIndex')]      [string]      ${LinkLayerAddress},        [Parameter(ParameterSetName='ByInterfaceAlias')]      [Parameter(ParameterSetName='ByInterfaceIndex')]      [string]      ${PolicyStore},        [Parameter(ParameterSetName='ByInterfaceAlias')]      [Parameter(ParameterSetName='ByInterfaceIndex')]      [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State]      ${State},        [Parameter(ParameterSetName='ByInterfaceAlias')]      [Parameter(ParameterSetName='ByInterfaceIndex')]      [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily]      ${AddressFamily},        [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]      [Alias('ifIndex')]      [uint32]      ${InterfaceIndex},        [Parameter(ParameterSetName='ByInterfaceAlias')]      [Parameter(ParameterSetName='ByInterfaceIndex')]      [Alias('Session')]      [ValidateNotNullOrEmpty()]      [CimSession[]]      ${CimSession},        [Parameter(ParameterSetName='ByInterfaceAlias')]      [Parameter(ParameterSetName='ByInterfaceIndex')]      [int]      ${ThrottleLimit},        [Parameter(ParameterSetName='ByInterfaceAlias')]      [Parameter(ParameterSetName='ByInterfaceIndex')]      [switch]      ${AsJob})        DynamicParam {          try           {              if (-not $__cmdletization_exceptionHasBeenThrown)              {                  $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()                  $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)                    if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])                  {                      ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()                  }              }          }          catch          {              $__cmdletization_exceptionHasBeenThrown = $true              throw          }      }        Begin {          $__cmdletization_exceptionHasBeenThrown = $false          try           {              __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters              $__cmdletization_objectModelWrapper.BeginProcessing()          }          catch          {              $__cmdletization_exceptionHasBeenThrown = $true              throw          }      }                  Process {          try           {              if (-not $__cmdletization_exceptionHasBeenThrown)              {        $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()          switch -exact ($PSCmdlet.ParameterSetName) {           { @('ByInterfaceAlias') -contains $_ } {          [object]$__cmdletization_defaultValue = $null          [object]$__cmdletization_defaultValueIsPresent = $false          if ($PSBoundParameters.ContainsKey('IPAddress')) {            [object]$__cmdletization_value = ${IPAddress}            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}          } else {            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}          }          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)            [object]$__cmdletization_defaultValue = $null          [object]$__cmdletization_defaultValueIsPresent = $false          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {            [object]$__cmdletization_value = ${InterfaceAlias}            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}          } else {            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}          }          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)            [object]$__cmdletization_defaultValue = $null          [object]$__cmdletization_defaultValueIsPresent = $false          if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {            [object]$__cmdletization_value = ${LinkLayerAddress}            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}          } else {            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}          }          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)            [object]$__cmdletization_defaultValue = $null          [object]$__cmdletization_defaultValueIsPresent = $false          if ($PSBoundParameters.ContainsKey('PolicyStore')) {            [object]$__cmdletization_value = ${PolicyStore}            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}          } else {            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}          }          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)            [object]$__cmdletization_defaultValue = $null          [object]$__cmdletization_defaultValueIsPresent = $false          if ($PSBoundParameters.ContainsKey('State')) {            [object]$__cmdletization_value = ${State}            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}          } else {            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}          }          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)            [object]$__cmdletization_defaultValue = $null          [object]$__cmdletization_defaultValueIsPresent = $false          if ($PSBoundParameters.ContainsKey('AddressFamily')) {            [object]$__cmdletization_value = ${AddressFamily}            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}          } else {            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}          }          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)            [object]$__cmdletization_defaultValue = $null          [object]$__cmdletization_defaultValueIsPresent = $false            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType     ScriptBlock ID: b8160ad2-d1eb-447e-b21b-0a9eb1e73fd0  Path: 	121110159"
2025-03-19T10:35:00+00:00 server01 "Dec 24 15:53:49 2024	8001	Microsoft-Windows-Store	SYSTEM	User	Information	ntkhanh-2.tma.com.vn	LM		Invoking license manager because license/lease polling time up: PFN MicrosoftCorporationII.WindowsSubsystemForLinux_2.3.26.0_x64__8wekyb3d8bbwe  Function: InvokeLicenseManagerRequired  Source: onecoreuap\enduser\winstore\licensemanager\apisethost\activationapis.cpp (361)	4264267"
